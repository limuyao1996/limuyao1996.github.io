<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[LeetCode-003.Longest Substring Without Repeating Characters]]></title>
      <url>%2F2017%2F07%2F22%2FLeetCode-003%2F</url>
      <content type="text"><![CDATA[题目描述：Given a string, find the length of the longest substring without repeating characters. Examples:Given “abcabcbb”, the answer is “abc”, which the length is 3.Given “bbbbb”, the answer is “b”, with the length of 1.Given “pwwkew”, the answer is “wke”, with the length of 3.Note that the answer must be a substring, “pwke” is a subsequence and not a substring. 思路：用$i,j$从$i=0,j=0$开始在字符串上划出区间，用$k$从区间$[i, j)$扫描，每扫描一次，$j$向后移动1步。不断对比$s[k]$和$s[j]$，当$s[k]$和$s[j]$相等，说明出现重复字符，则将$i$移动到$k+1$的位置，$k$再在区间$[i, j)$上重新扫描，直到$j$到达字符串末尾，于是就将所有的substring都扫描过一遍了，选出其中长度最长的即为结果。注意： strlen() 函数时间复杂度为$O(len)$，用变量$n$保存以备后面多次使用该值，提高效率，之前没注意这个，LeetCode好几次判Time Limit Exceeded。 C语言解法：123456789101112131415161718192021222324int lengthOfLongestSubstring(char* s) &#123; int j, k, i = 0; int len = 1, count = 1; int n = strlen(s); if(n &gt; 1)&#123; for(j=i+1; j&lt;n; j++)&#123; for(k=i; k&lt;j; k++)&#123; if(s[j] == s[k])&#123; i = k + 1; break; &#125; else &#123; count++; &#125; &#125; if(len &lt; count)&#123; len = count; &#125; count = 1; &#125; &#125; else if(n == 0)&#123; len = 0; &#125; return len;&#125; C++解法：1234567891011121314151617181920212223242526class Solution &#123;public: int lengthOfLongestSubstring(string s) &#123; int j, k, i = 0; int len = 1, count = 1; if(s.length() &gt; 1)&#123; for(j=i+1; j&lt;s.length(); j++)&#123; for(k=i; k&lt;j; k++)&#123; if(s[j] == s[k])&#123; i = k + 1; break; &#125; else &#123; count++; &#125; &#125; if(len &lt; count)&#123; len = count; &#125; count = 1; &#125; &#125; else if(s.length() == 0)&#123; len = 0; &#125; return len; &#125;&#125;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode-002.Add Two Numbers]]></title>
      <url>%2F2017%2F07%2F22%2FLeetCode-002%2F</url>
      <content type="text"><![CDATA[题目描述：You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)Output: 7 -&gt; 0 -&gt; 8 思路：链表每一个结点为整数的一位数字，且链表为整数的倒序排列，即从链表头开始是整数最低位数字。因此每位数字相加即可，可能会出现三种情况： l1、l2当前结点均存在，则结果为两结点值和前一位进位值相加对10取余，且要计算对后面的进位。 l1、l2当前结点只有一个存在，则结果为该结点值和前一位进位值相加对10取余，且要计算对后面的进位。 l1、l2当前节点均不存在，则判断前一位进位值。若为1，则结果为1；若为0则计算结束。 C语言解法：1234567891011121314151617181920212223242526272829303132333435363738394041/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * struct ListNode *next; * &#125;; */struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) &#123; int carry = 0; struct ListNode *head, *sum; head = (struct ListNode *)malloc(sizeof(struct ListNode)); sum = head; sum-&gt;next = NULL; while(l1 != NULL || l2 != NULL || carry)&#123; if(l1 != NULL &amp;&amp; l2 != NULL)&#123; sum-&gt;val = (l1-&gt;val + l2-&gt;val + carry) % 10; carry = (l1-&gt;val + l2-&gt;val + carry) / 10; &#125; else if(l1 == NULL &amp;&amp; l2 != NULL)&#123; sum-&gt;val = (l2-&gt;val + carry) % 10; carry = (l2-&gt;val + carry) / 10; &#125; else if(l2 == NULL &amp;&amp; l1 !=NULL)&#123; sum-&gt;val = (l1-&gt;val + carry) % 10; carry = (l1-&gt;val + carry) / 10; &#125; else if(carry)&#123; sum-&gt;val = carry; carry = 0; &#125; if(l1 != NULL) l1 = l1-&gt;next; if(l2 != NULL) l2 = l2-&gt;next; if(l1!=NULL || l2!=NULL || carry)&#123; struct ListNode* t; t = (struct ListNode *)malloc(sizeof(struct ListNode)); t-&gt;next = sum-&gt;next; sum-&gt;next = t; sum = sum-&gt;next; &#125; &#125; return head;&#125; C++解法：1234567891011121314151617181920212223242526272829303132333435363738394041/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123; int carry = 0; ListNode *head, *sum; head = new ListNode(0); sum = head; while(l1 != NULL || l2 != NULL || carry)&#123; if(l1 !=NULL &amp;&amp; l2 != NULL)&#123; *sum = ListNode((l1-&gt;val + l2-&gt;val + carry) % 10); carry = (l1-&gt;val + l2-&gt;val + carry) / 10; &#125; else if(l1 != NULL &amp;&amp; l2 == NULL)&#123; *sum = ListNode((l1-&gt;val + carry) % 10); carry = (l1-&gt;val + carry) / 10; &#125; else if(l1 == NULL &amp;&amp; l2 != NULL)&#123; *sum = ListNode((l2-&gt;val + carry) % 10); carry = (l2-&gt;val + carry) / 10; &#125; else if(carry)&#123; *sum = ListNode(carry); carry = 0; &#125; if(l1 != NULL) l1 = l1-&gt;next; if(l2 != NULL) l2 = l2-&gt;next; if(l1 != NULL || l2 != NULL || carry)&#123; sum-&gt;next = new ListNode(0); sum = sum-&gt;next; &#125; &#125; return head; &#125;&#125;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode-001.Two Sum]]></title>
      <url>%2F2017%2F07%2F22%2FLeetCode-001%2F</url>
      <content type="text"><![CDATA[题目描述：Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Examples：123Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 思路：题目比较容易，而且题目说了每组输入必有一解，扫描数组,找到i+j=target即可。 C语言解法：1234567891011121314151617/** * Note: The returned array must be malloced, assume caller calls free(). */int* twoSum(int* nums, int numsSize, int target) &#123; int* indices; int i, j; indices = (int*)malloc(2*sizeof(int)); for(i=0; i&lt;numsSize-1; i++)&#123; for(j=i+1; j&lt;numsSize; j++)&#123; if(nums[i]+nums[j] == target)&#123; indices[0]=i; indices[1]=j; &#125; &#125; &#125; return indices;&#125; C++解法：123456789101112131415class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; vector&lt;int&gt; index(2); for(int i=0; i&lt;nums.size()-1; i++)&#123; for(int j=i+1; j&lt;nums.size(); j++)&#123; if(nums[i]+nums[j] == target)&#123; index[0]=i; index[1]=j; &#125; &#125; &#125; return index; &#125;&#125;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
